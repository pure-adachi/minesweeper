{"version":3,"sources":["components/atoms/I18n/Locales/index.ts","components/atoms/I18n/index.tsx","constraints/Modes/index.ts","components/templates/Frame/index.tsx","components/templates/Board/Module/index.tsx","components/atoms/DigitalNumber/index.tsx","components/molecules/BombCount/index.tsx","components/molecules/Time/index.tsx","components/atoms/CellLabel/index.tsx","components/atoms/ResetButton/index.tsx","components/templates/Board/index.tsx","components/pages/Top/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["messages","ja","flatten","I18n","locale","props","defaultProps","Modes","easy","bomb","x","y","normal","hard","Frame","children","className","flagCount","boardSurfaces","map","cells","filter","cell","state","length","reduce","accumulator","currentValue","DigitalNumber","numStr","replace","classNames","BombCount","count","countStr","String","slice","zeroPaddingCount","split","i","key","Time","startUnixTime","finishedUnixTime","useState","Date","now","setNow","useEffect","interval","setInterval","clearInterval","timeStr","time","Math","floor","getTime","zeroPaddingTime","CellLabel","value","icon","faFlag","faQuestion","faBomb","ResetButton","onClick","gameStatus","faGrinStars","faTired","faGrin","ison","initialCell","Board","modeInfo","setBoardSurfaces","started","setStarted","startPosition","setStartPosition","currentPosition","setCurrentPosition","setGameStatus","setStartUnixTime","setFinishedUnixTime","modeInMobile","setModeInMobile","initialBoard","useCallback","Array","fill","array","push","setBoardItems","j","n","k","random","shuffle","newArray","newRow","targetCellsIndex","bombCells","setBombCount","openAroundSafeCells","newBoardSurfaces","openedBombCells","changedBombCellsToFlag","updateCell","board","row","openCell","end","selected","handleClick","onContextMenu","e","preventDefault","nextState","changeCell","viewClassName","active","Top","defaultMode","mode","setMode","formatMessage","useIntl","id","onChange","target","defaultValue","Object","keys","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8883bd71.chunk.js","sourcesContent":["import flatten from \"flat\";\nimport ja from \"./ja.json\";\n\nexport const messages: {\n  ja: {\n    [key: string]: string;\n  };\n} = {\n  ja: flatten(ja)\n};\n","import React, { ReactNode } from \"react\";\nimport { IntlProvider } from \"react-intl\";\nimport { messages } from \"./Locales\";\n\ninterface IProps {\n  children: ReactNode;\n  locale: \"ja\";\n}\n\nconst I18n = ({ locale, ...props }: IProps) => (\n  <IntlProvider locale={locale} messages={messages[locale]} {...props} />\n);\n\nI18n.defaultProps = {\n  locale: \"ja\"\n};\n\nexport default I18n;\n","export type ModeInfoType = {\n  bomb: number;\n  x: number;\n  y: number;\n};\n\ntype ModesType = {\n  [key: string]: ModeInfoType;\n};\n\nconst Modes: ModesType = {\n  easy: {\n    bomb: 10,\n    x: 9,\n    y: 9\n  },\n  normal: {\n    bomb: 40,\n    x: 16,\n    y: 16\n  },\n  hard: {\n    bomb: 99,\n    x: 30,\n    y: 16\n  }\n};\n\nexport default Modes;\n","import React, { ReactNode } from \"react\";\n\ninterface IProps {\n  children: ReactNode;\n}\n\nconst Frame = ({ children }: IProps) => {\n  return <div className=\"wrapper\">{children}</div>;\n};\n\nexport default Frame;\n","import { faBomb, faFlag, faQuestion } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { CellType, CellStates, initialCell, PositionType } from \"../../Board\";\nimport { ModeInfoType } from \"../../../../constraints/Modes\";\n\ninterface IShuffleProps extends PositionType {\n  modeInfo: ModeInfoType;\n}\n\nexport const shuffle = (\n  cells: CellType[],\n  { i, j, modeInfo: { x, y } }: IShuffleProps\n) => {\n  let array: CellType[] = [];\n\n  // ダステンフェルドの手法(フィッシャー–イェーツのシャッフルの改良版)でシャッフル\n  while (cells.length > 0) {\n    const n = cells.length;\n    const k = Math.floor(Math.random() * n);\n\n    // 一番最初に選択したマスには爆弾を配置しない為の対策\n    if (i * x + j + 1 === array.length + 1) {\n      array.push(initialCell);\n    }\n\n    array.push(cells[k]);\n    cells[k] = cells[n - 1];\n    cells = cells.slice(0, n - 1);\n  }\n\n  // 一番右下のマスを選択された場合の対策\n  if (x * y > array.length) {\n    array.push(initialCell);\n  }\n\n  return array;\n};\n\nexport const setBombCount = (array: CellType[][]) => {\n  let newArray: CellType[][] = [];\n\n  for (let i = 0; i < array.length; i++) {\n    let newRow: CellType[] = [];\n\n    for (let j = 0; j < array[i].length; j++) {\n      if (array[i][j].bomb) {\n        newRow.push(array[i][j]);\n      } else {\n        let targetCellsIndex: CellType[] = [];\n\n        // 上下：i\n        // 左右：j\n\n        // 左上\n        if (j - 1 >= 0 && i - 1 >= 0) {\n          targetCellsIndex.push(array[i - 1][j - 1]);\n        }\n        // 上\n        if (i - 1 >= 0) {\n          targetCellsIndex.push(array[i - 1][j]);\n        }\n        // 右上\n        if (j + 1 < array[i].length && i - 1 >= 0) {\n          targetCellsIndex.push(array[i - 1][j + 1]);\n        }\n        // 右\n        if (j + 1 < array[i].length) {\n          targetCellsIndex.push(array[i][j + 1]);\n        }\n        // 右下\n        if (j + 1 < array[i].length && i + 1 < array.length) {\n          targetCellsIndex.push(array[i + 1][j + 1]);\n        }\n        // 下\n        if (i + 1 < array.length) {\n          targetCellsIndex.push(array[i + 1][j]);\n        }\n        // 左下\n        if (j - 1 >= 0 && i + 1 < array.length) {\n          targetCellsIndex.push(array[i + 1][j - 1]);\n        }\n        // 左\n        if (j - 1 >= 0) {\n          targetCellsIndex.push(array[i][j - 1]);\n        }\n        const bombCells: CellType[] = targetCellsIndex.filter(\n          ({ bomb }) => bomb\n        );\n\n        newRow.push({\n          ...array[i][j],\n          value: bombCells.length\n        });\n      }\n    }\n\n    newArray.push(newRow);\n  }\n\n  return newArray;\n};\n\nexport const cellLabel = (cell: CellType) => {\n  switch (cell.state) {\n    case \"close\":\n      return;\n    case \"flag\":\n      return <FontAwesomeIcon icon={faFlag} />;\n    case \"onHold\":\n      return <FontAwesomeIcon icon={faQuestion} />;\n    case \"open\":\n      if (cell.bomb) {\n        return <FontAwesomeIcon icon={faBomb} />;\n      } else {\n        if (cell.value === 0) {\n          return;\n        } else {\n          return cell.value;\n        }\n      }\n  }\n};\n\nexport const nextState = (state: CellStates) => {\n  switch (state) {\n    case \"close\":\n      return \"flag\";\n    case \"flag\":\n      return \"onHold\";\n    case \"onHold\":\n      return \"close\";\n    case \"open\":\n      return state;\n  }\n};\n\nexport const openedBombCells = (boardSurfaces: CellType[][]) =>\n  boardSurfaces.map(cells =>\n    cells.map(cell => {\n      if (cell.bomb) {\n        return {\n          ...cell,\n          state: \"open\"\n        };\n      } else {\n        return cell;\n      }\n    })\n  );\n\nexport const changedBombCellsToFlag = (boardSurfaces: CellType[][]) =>\n  boardSurfaces.map(cells =>\n    cells.map(cell => {\n      if (cell.bomb) {\n        return {\n          ...cell,\n          state: \"flag\"\n        };\n      } else {\n        return cell;\n      }\n    })\n  );\n\nexport const openAroundSafeCells = (\n  boardSurfaces: CellType[][],\n  currentPosition: PositionType\n) => {\n  const { i, j } = currentPosition;\n  const { state, value } = boardSurfaces[i][j];\n  let newBoardSurfaces: CellType[][] = [...boardSurfaces];\n\n  // 最初は既に空いてる\n  if (state !== \"open\") {\n    newBoardSurfaces[i][j].state = \"open\";\n  }\n\n  // 爆弾のある手前まで来たら再帰処理終了\n  if (value !== 0) {\n    return newBoardSurfaces;\n  }\n\n  // 上下：i\n  // 左右：j\n\n  // 左上\n  if (\n    j - 1 >= 0 &&\n    i - 1 >= 0 &&\n    newBoardSurfaces[i - 1][j - 1].state !== \"open\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i - 1,\n      j: j - 1\n    });\n  }\n  // 上\n  if (i - 1 >= 0 && newBoardSurfaces[i - 1][j].state !== \"open\") {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i - 1,\n      j\n    });\n  }\n  // 右上\n  if (\n    j + 1 < newBoardSurfaces[i].length &&\n    i - 1 >= 0 &&\n    newBoardSurfaces[i - 1][j + 1].state !== \"open\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i - 1,\n      j: j + 1\n    });\n  }\n  // 右\n  if (\n    j + 1 < newBoardSurfaces[i].length &&\n    newBoardSurfaces[i][j + 1].state !== \"open\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i,\n      j: j + 1\n    });\n  }\n  // 右下\n  if (\n    j + 1 < newBoardSurfaces[i].length &&\n    i + 1 < newBoardSurfaces.length &&\n    newBoardSurfaces[i + 1][j + 1].state !== \"open\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i + 1,\n      j: j + 1\n    });\n  }\n  // 下\n  if (\n    i + 1 < newBoardSurfaces.length &&\n    newBoardSurfaces[i + 1][j].state !== \"open\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i + 1,\n      j\n    });\n  }\n  // 左下\n  if (\n    j - 1 >= 0 &&\n    i + 1 < newBoardSurfaces.length &&\n    newBoardSurfaces[i + 1][j - 1].state !== \"open\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i + 1,\n      j: j - 1\n    });\n  }\n  // 左\n  if (j - 1 >= 0 && newBoardSurfaces[i][j - 1].state !== \"open\") {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i,\n      j: j - 1\n    });\n  }\n\n  return newBoardSurfaces;\n};\n\nexport const flagCount = (boardSurfaces: CellType[][]) =>\n  boardSurfaces\n    .map(cells => cells.filter(cell => cell.state === \"flag\").length)\n    .reduce((accumulator, currentValue) => accumulator + currentValue);\n","import classNames from \"classnames\";\nimport React from \"react\";\n\ninterface IProps {\n  numStr: string;\n}\n\nconst DigitalNumber = ({ numStr }: IProps) => {\n  const className = `number-${numStr.replace(/-/, \"minus\")}`;\n\n  return (\n    <div className={classNames(\"digital-number\", className)}>\n      <div className=\"section top\" />\n      <div className=\"section top-right\" />\n      <div className=\"section top-left\" />\n      <div className=\"middle\" />\n      <div className=\"section bottom-right\" />\n      <div className=\"section bottom-left\" />\n      <div className=\"section bottom\" />\n    </div>\n  );\n};\n\nexport default DigitalNumber;\n","import React from \"react\";\nimport DigitalNumber from \"../../atoms/DigitalNumber\";\n\ninterface IProps {\n  count: number;\n}\n\nconst BombCount = ({ count }: IProps) => {\n  const zeroPaddingCount = () => {\n    const countStr = String(count);\n\n    return (\"000\" + countStr).slice(countStr.length);\n  };\n\n  return (\n    <div className=\"bomb-count-info\">\n      {zeroPaddingCount()\n        .split(\"\")\n        .map((countStr, i) => (\n          <DigitalNumber key={i} numStr={countStr} />\n        ))}\n    </div>\n  );\n};\n\nexport default BombCount;\n","import React, { useEffect, useState } from \"react\";\nimport DigitalNumber from \"../../atoms/DigitalNumber\";\n\ninterface IProps {\n  startUnixTime: number;\n  finishedUnixTime: number;\n}\n\nconst Time = ({ startUnixTime, finishedUnixTime }: IProps) => {\n  const [now, setNow] = useState(new Date());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setNow(new Date());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  });\n\n  const timeStr = (time = Math.floor(now.getTime() / 1000) - startUnixTime) => {\n    if (time < 0) {\n      return \"0\";\n    } else if (time >= 999) {\n      return \"999\";\n    } else {\n      return String(time);\n    }\n  };\n\n  const zeroPaddingTime = (time = timeStr()) => {\n    return (\"000\" + time).slice(time.length);\n  };\n\n  const displayTime = () => {\n    if (!startUnixTime) {\n      return \"000\";\n    }\n\n    if (finishedUnixTime) {\n      return zeroPaddingTime(timeStr(finishedUnixTime - startUnixTime));\n    }\n\n    return zeroPaddingTime();\n  };\n\n  return (\n    <div className=\"time-info\">\n      {displayTime()\n        .split(\"\")\n        .map((countStr, i) => (\n          <DigitalNumber key={i} numStr={countStr} />\n        ))}\n    </div>\n  );\n};\n\nexport default Time;\n","import { faBomb, faFlag, faQuestion } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { CellType } from \"../../templates/Board\";\n\ninterface IProps {\n  cell: CellType;\n}\n\nconst CellLabel = ({ cell: { state, bomb, value } }: IProps) => {\n  switch (state) {\n    case \"close\":\n      return <></>;\n    case \"flag\":\n      return <FontAwesomeIcon icon={faFlag} />;\n    case \"onHold\":\n      return <FontAwesomeIcon icon={faQuestion} />;\n    case \"open\":\n      if (bomb) {\n        return <FontAwesomeIcon icon={faBomb} />;\n      } else {\n        if (value === 0) {\n          return <></>;\n        } else {\n          return <>{value}</>;\n        }\n      }\n  }\n};\n\nexport default CellLabel;\n","import {\n  faTired,\n  faGrin,\n  faGrinStars\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\n\ntype GameStatus = \"win\" | \"lose\" | null;\n\ninterface IProps {\n  onClick: () => void;\n  gameStatus: GameStatus;\n}\n\nconst ResetButton = ({ onClick, gameStatus }: IProps) => {\n  const ison = () => {\n    switch (gameStatus) {\n      case \"win\":\n        return <FontAwesomeIcon icon={faGrinStars} />;\n      case \"lose\":\n        return <FontAwesomeIcon icon={faTired} />;\n      default:\n        return <FontAwesomeIcon icon={faGrin} />;\n    }\n  };\n\n  return (\n    <div className=\"reset-button\" onClick={onClick}>\n      {ison()}\n    </div>\n  );\n};\n\nexport default ResetButton;\n","import { faFlag, faQuestion } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport classNames from \"classnames\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { MobileView } from \"react-device-detect\";\nimport { ModeInfoType } from \"../../../constraints/Modes\";\nimport {\n  nextState,\n  setBombCount,\n  shuffle,\n  openedBombCells,\n  changedBombCellsToFlag,\n  openAroundSafeCells,\n  flagCount\n} from \"./Module\";\nimport BombCount from \"../../molecules/BombCount\";\nimport Time from \"../../molecules/Time\";\nimport CellLabel from \"../../atoms/CellLabel\";\nimport ResetButton from \"../../atoms/ResetButton\";\n\ninterface IProps {\n  modeInfo: ModeInfoType;\n}\n\nexport type CellStates = \"close\" | \"flag\" | \"onHold\" | \"open\";\n\nexport type CellType = {\n  state: CellStates;\n  bomb: boolean;\n  value: number;\n};\n\nexport type PositionType = {\n  i: number;\n  j: number;\n};\n\nexport const initialCell: CellType = {\n  state: \"close\",\n  bomb: false,\n  value: 0\n};\n\nconst Board = ({ modeInfo }: IProps) => {\n  const [boardSurfaces, setBoardSurfaces] = useState();\n  const [started, setStarted] = useState(false);\n  const [startPosition, setStartPosition] = useState();\n  const [currentPosition, setCurrentPosition] = useState();\n  const [gameStatus, setGameStatus] = useState();\n  const [startUnixTime, setStartUnixTime] = useState();\n  const [finishedUnixTime, setFinishedUnixTime] = useState();\n  const [modeInMobile, setModeInMobile] = useState();\n\n  const initialBoard = useCallback(() => {\n    const { x, y }: ModeInfoType = modeInfo;\n\n    let cells: CellType[] = Array(x * y).fill(initialCell);\n    let array: CellType[][] = [];\n\n    for (let i = 0; i < cells.length; i += x) {\n      array.push(cells.slice(i, i + x));\n    }\n\n    setBoardSurfaces(array);\n    setStarted(false);\n    setStartPosition(null);\n    setCurrentPosition(null);\n    setGameStatus(null);\n    setStartUnixTime(null);\n    setFinishedUnixTime(null);\n    setModeInMobile(null);\n  }, [modeInfo]);\n\n  useEffect(() => {\n    initialBoard();\n  }, [initialBoard]);\n\n  const setBoardItems = useCallback(() => {\n    const { x, y, bomb }: ModeInfoType = modeInfo;\n\n    let cells: CellType[] = [\n      ...Array(bomb).fill({ ...initialCell, bomb: true }),\n      ...Array(x * y - bomb - 1).fill(initialCell) // 初回選択マスは爆弾無しとする為に-1\n    ];\n\n    let array: CellType[] = shuffle(cells, { ...startPosition, modeInfo });\n    let newArray: CellType[][] = [];\n\n    for (let i = 0; i < array.length; i += x) {\n      newArray.push(array.slice(i, i + x));\n    }\n    setBoardSurfaces(setBombCount(newArray));\n    setStartUnixTime(Math.floor(new Date().getTime() / 1000));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [startPosition]);\n\n  useEffect(() => {\n    if (startPosition) {\n      setBoardItems();\n      setStarted(true);\n    }\n  }, [startPosition, setBoardItems]);\n\n  useEffect(() => {\n    if (currentPosition) {\n      const { i, j } = currentPosition;\n      const { bomb, state, value } = boardSurfaces[i][j];\n      if (bomb) {\n        setGameStatus(\"lose\");\n      } else {\n        const closeSafeCellRows = boardSurfaces.filter((cells: CellType[]) => {\n          const safeCellsRows = cells.filter(\n            cell => !cell.bomb && cell.state !== \"open\"\n          );\n          return safeCellsRows.length > 0;\n        });\n        if (closeSafeCellRows.length === 0) {\n          setGameStatus(\"win\");\n        } else if (value === 0 && state === \"open\") {\n          setBoardSurfaces(openAroundSafeCells(boardSurfaces, currentPosition));\n        }\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPosition]);\n\n  useEffect(() => {\n    if (gameStatus) {\n      switch (gameStatus) {\n        case \"lose\":\n          setBoardSurfaces(openedBombCells(boardSurfaces));\n          break;\n        case \"win\":\n          setBoardSurfaces(changedBombCellsToFlag(boardSurfaces));\n          break;\n      }\n\n      setFinishedUnixTime(Math.floor(new Date().getTime() / 1000));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [gameStatus]);\n\n  const updateCell = useCallback(\n    (i: number, j: number, state: CellStates) => {\n      let board = [...boardSurfaces];\n      let row = [...board[i]];\n      row[j] = { ...board[i][j], state };\n      board[i] = row;\n\n      setBoardSurfaces(board);\n    },\n    [boardSurfaces]\n  );\n\n  const openCell = useCallback(\n    (i: number, j: number) => {\n      if (startPosition) {\n        if (boardSurfaces[i][j].state === \"close\") {\n          updateCell(i, j, \"open\");\n          setCurrentPosition({ i, j });\n        }\n      } else {\n        setStartPosition({ i, j });\n        setCurrentPosition({ i, j });\n      }\n    },\n    [boardSurfaces, startPosition, updateCell]\n  );\n\n  const handleClick = (i: number, j: number) => {\n    if (!gameStatus && boardSurfaces[i][j].state !== \"open\") {\n      if (modeInMobile === \"flag\") {\n        if (boardSurfaces[i][j].state === \"flag\") {\n          updateCell(i, j, \"close\");\n        } else {\n          updateCell(i, j, \"flag\");\n        }\n      } else if (modeInMobile === \"hold\") {\n        if (boardSurfaces[i][j].state === \"onHold\") {\n          updateCell(i, j, \"close\");\n        } else {\n          updateCell(i, j, \"onHold\");\n        }\n      } else {\n        openCell(i, j);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (started && startPosition) {\n      openCell(startPosition.i, startPosition.j);\n    }\n  }, [started, openCell, startPosition]);\n\n  if (!boardSurfaces) {\n    return <></>;\n  }\n\n  const changeCell = (e: React.MouseEvent, i: number, j: number) => {\n    e.preventDefault();\n\n    if (startPosition && !gameStatus) {\n      updateCell(i, j, nextState(boardSurfaces[i][j].state));\n    }\n  };\n\n  const flagMode = () => {\n    if (started) {\n      setModeInMobile(modeInMobile === \"flag\" ? null : \"flag\");\n    }\n  };\n\n  const holdMode = () => {\n    if (started) {\n      setModeInMobile(modeInMobile === \"hold\" ? null : \"hold\");\n    }\n  };\n\n  return (\n    <>\n      <div className=\"board\">\n        <div className=\"game-info\">\n          <BombCount count={modeInfo.bomb - flagCount(boardSurfaces)} />\n          <ResetButton onClick={initialBoard} gameStatus={gameStatus} />\n          <Time\n            startUnixTime={startUnixTime}\n            finishedUnixTime={finishedUnixTime}\n          />\n        </div>\n        <div className={classNames(\"cell-area\", { end: gameStatus })}>\n          {boardSurfaces.map((row: CellType[], i: number) => (\n            <div key={i} className=\"row\">\n              {row.map((cell, j) => (\n                <div\n                  key={j}\n                  className={classNames(\"cell\", cell.state, {\n                    bomb: cell.bomb && cell.state === \"open\",\n                    selected:\n                      currentPosition &&\n                      currentPosition.i === i &&\n                      currentPosition.j === j,\n                    [`bombCount-${cell.value}`]: cell.state === \"open\",\n                    notBomb: gameStatus && cell.state === \"flag\" && !cell.bomb\n                  })}\n                  onClick={() => handleClick(i, j)}\n                  onContextMenu={e => changeCell(e, i, j)}\n                >\n                  <CellLabel cell={cell} />\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      <MobileView viewClassName=\"mobile-menu\">\n        <div\n          className={classNames(\"flag-mode\", {\n            active: modeInMobile === \"flag\"\n          })}\n          onClick={flagMode}\n        >\n          <FontAwesomeIcon icon={faFlag} />\n        </div>\n        <div\n          className={classNames(\"hold-mode\", {\n            active: modeInMobile === \"hold\"\n          })}\n          onClick={holdMode}\n        >\n          <FontAwesomeIcon icon={faQuestion} />\n        </div>\n      </MobileView>\n    </>\n  );\n};\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport Modes from \"../../../constraints/Modes\";\nimport Frame from \"../../templates/Frame\";\nimport Board from \"../../templates/Board\";\n\ninterface IProps {\n  defaultMode: ModeType;\n}\n\ntype ModeType = \"easy\" | \"normal\" | \"hard\";\n\nconst Top = ({ defaultMode }: IProps) => {\n  const [mode, setMode] = useState(defaultMode);\n  const { formatMessage } = useIntl();\n\n  const changeMode = ({\n    target: { value }\n  }: React.ChangeEvent<HTMLSelectElement>) => {\n    setMode(value as ModeType);\n  };\n\n  return (\n    <Frame>\n      <div className=\"title\">\n        <FormattedMessage id=\"pages.Top.title\" />\n      </div>\n\n      <div className=\"menu\">\n        <select onChange={changeMode} defaultValue={mode}>\n          {Object.keys(Modes).map((key, i) => (\n            <option key={i} value={key}>\n              {formatMessage({ id: `pages.Top.mode.${key}` })}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <Board modeInfo={Modes[mode]} />\n    </Frame>\n  );\n};\n\nTop.defaultProps = {\n  defaultMode: \"easy\"\n};\n\nexport default Top;\n","import React from \"react\";\nimport \"../styles/App.scss\";\nimport I18n from \"./atoms/I18n\";\nimport Top from \"./pages/Top\";\n\nconst App = () => {\n  return (\n    <I18n>\n      <Top />\n    </I18n>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}