{"version":3,"sources":["components/atoms/I18n/Locales/index.ts","components/atoms/I18n/index.tsx","constraints/Modes/index.ts","components/templates/Frame/index.tsx","components/templates/Board/index.tsx","components/pages/Top/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["messages","ja","flatten","I18n","locale","props","defaultProps","Modes","easy","bomb","x","y","normal","hard","Frame","children","className","Board","modeInfo","useState","boardSurfaces","setBoardSurfaces","started","setStarted","initialBoard","useCallback","initialCell","state","value","cells","Array","fill","array","i","length","j","Math","floor","random","shuffle","push","slice","useEffect","exchangeFirstSelectedBombCell","safeCellIndex","findIndex","updateCell","nextState","board","row","onClick","id","map","key","cell","classNames","openCell","onContextMenu","e","preventDefault","changeCell","icon","faFlag","faQuestion","faBomb","cellLabel","Top","defaultMode","mode","setMode","formatMessage","useIntl","onChange","target","defaultValue","Object","keys","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.333ddb42.chunk.js","sourcesContent":["import flatten from \"flat\";\nimport ja from \"./ja.json\";\n\nexport const messages: {\n  ja: {\n    [key: string]: string;\n  };\n} = {\n  ja: flatten(ja)\n};\n","import React, { ReactNode } from \"react\";\nimport { IntlProvider } from \"react-intl\";\nimport { messages } from \"./Locales\";\n\ninterface IProps {\n  children: ReactNode;\n  locale: \"ja\";\n}\n\nconst I18n = ({ locale, ...props }: IProps) => (\n  <IntlProvider locale={locale} messages={messages[locale]} {...props} />\n);\n\nI18n.defaultProps = {\n  locale: \"ja\"\n};\n\nexport default I18n;\n","export type ModeInfoType = {\n  bomb: number;\n  x: number;\n  y: number;\n};\n\ntype ModesType = {\n  [key: string]: ModeInfoType;\n};\n\nconst Modes: ModesType = {\n  easy: {\n    bomb: 10,\n    x: 10,\n    y: 7\n  },\n  normal: {\n    bomb: 40,\n    x: 18,\n    y: 14\n  },\n  hard: {\n    bomb: 99,\n    x: 24,\n    y: 20\n  }\n};\n\nexport default Modes;\n","import React, { ReactNode } from \"react\";\n\ninterface IProps {\n  children: ReactNode;\n}\n\nconst Frame = ({ children }: IProps) => {\n  return <div className=\"wrapper\">{children}</div>;\n};\n\nexport default Frame;\n","import { faBomb, faFlag, faQuestion } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport classNames from \"classnames\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ModeInfoType } from \"../../../constraints/Modes\";\n\ninterface IProps {\n  modeInfo: ModeInfoType;\n}\n\ntype CellStates = \"close\" | \"flag\" | \"onHold\" | \"open\";\n\ntype CellType = {\n  state: CellStates;\n  bomb: boolean;\n  value: number;\n};\n\nconst Board = ({ modeInfo }: IProps) => {\n  const [boardSurfaces, setBoardSurfaces] = useState();\n  const [started, setStarted] = useState(false);\n\n  const shuffle = (cells: CellType[]) => {\n    const array = [...cells];\n\n    for (let i = array.length - 1; i >= 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n\n    return array;\n  };\n\n  const initialBoard = useCallback(() => {\n    const { x, y, bomb }: ModeInfoType = modeInfo;\n    const initialCell: CellType = {\n      state: \"close\",\n      bomb: false,\n      value: 0\n    };\n\n    let cells: CellType[] = [\n      ...Array(bomb).fill({ ...initialCell, bomb: true }),\n      ...Array(x * y - bomb).fill(initialCell)\n    ];\n\n    cells = shuffle(cells);\n    let array: CellType[][] = [];\n\n    for (let i = 0; i < cells.length; i += x) {\n      array.push(cells.slice(i, i + x));\n    }\n\n    setBoardSurfaces(array);\n    setStarted(false);\n  }, [modeInfo]);\n\n  useEffect(() => {\n    initialBoard();\n  }, [modeInfo, initialBoard]);\n\n  if (!boardSurfaces) {\n    return <></>;\n  }\n\n  const openCell = (i: number, j: number) => {\n    if (started) {\n      updateCell(i, j, \"open\");\n    } else {\n      exchangeFirstSelectedBombCell(i, j);\n      setStarted(true);\n    }\n  };\n\n  const exchangeFirstSelectedBombCell = (x: number, y: number) => {\n    if (boardSurfaces[x][y].bomb) {\n      for (let i = 0; i < boardSurfaces.length; i++) {\n        const safeCellIndex: number = boardSurfaces[i].findIndex(\n          ({ bomb }: CellType) => !bomb\n        );\n\n        if (safeCellIndex > -1) {\n          const array = [...boardSurfaces];\n\n          array[x][y] = {\n            ...array[x][y],\n            state: \"open\",\n            bomb: false\n          };\n\n          array[i][safeCellIndex] = {\n            ...array[i][safeCellIndex],\n            bomb: true\n          };\n\n          setBoardSurfaces(array);\n\n          return;\n        }\n      }\n    }\n    updateCell(x, y, \"open\");\n  };\n\n  const changeCell = (e: React.MouseEvent, i: number, j: number) => {\n    e.preventDefault();\n\n    updateCell(i, j, nextState(boardSurfaces[i][j].state));\n  };\n\n  const nextState = (state: CellStates) => {\n    switch (state) {\n      case \"close\":\n        return \"flag\";\n      case \"flag\":\n        return \"onHold\";\n      case \"onHold\":\n        return \"close\";\n      case \"open\":\n        return state;\n    }\n  };\n\n  const updateCell = (i: number, j: number, state: CellStates) => {\n    let board = [...boardSurfaces];\n    let row = [...board[i]];\n    row[j] = { ...board[i][j], state };\n    board[i] = row;\n\n    setBoardSurfaces(board);\n  };\n\n  const cellLabel = (cell: CellType) => {\n    switch (cell.state) {\n      case \"close\":\n        return;\n      case \"flag\":\n        return <FontAwesomeIcon icon={faFlag} />;\n      case \"onHold\":\n        return <FontAwesomeIcon icon={faQuestion} />;\n      case \"open\":\n        if (cell.bomb) {\n          return <FontAwesomeIcon icon={faBomb} />;\n        } else {\n          if (cell.value === 0) {\n            return;\n          } else {\n            return cell.value;\n          }\n        }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"buttons\">\n        <button onClick={() => initialBoard()}>\n          <FormattedMessage id=\"templates.Board.reset\" />\n        </button>\n      </div>\n      <div className=\"board\">\n        {boardSurfaces.map((row: CellType[], i: number) => (\n          <div key={i} className=\"row\">\n            {row.map((cell, j) => (\n              <div\n                key={j}\n                className={classNames(\"cell\", cell.state, { bomb: cell.bomb })}\n                onClick={() => openCell(i, j)}\n                onContextMenu={e => changeCell(e, i, j)}\n              >\n                {cellLabel(cell)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Board;\n","import { faBomb } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport Modes from \"../../../constraints/Modes\";\nimport Frame from \"../../templates/Frame\";\nimport Board from \"../../templates/Board\";\n\ninterface IProps {\n  defaultMode: ModeType;\n}\n\ntype ModeType = \"easy\" | \"normal\" | \"hard\";\n\nconst Top = ({ defaultMode }: IProps) => {\n  const [mode, setMode] = useState(defaultMode);\n  const { formatMessage } = useIntl();\n\n  const changeMode = ({\n    target: { value }\n  }: React.ChangeEvent<HTMLSelectElement>) => {\n    setMode(value as ModeType);\n  };\n\n  return (\n    <Frame>\n      <div className=\"title\">\n        <FormattedMessage id=\"pages.Top.title\" />\n      </div>\n\n      <div className=\"menu\">\n        <select onChange={changeMode} defaultValue={mode}>\n          {Object.keys(Modes).map((key, i) => (\n            <option key={i} value={key}>\n              {formatMessage({ id: `pages.Top.mode.${key}` })}\n            </option>\n          ))}\n        </select>\n        <FontAwesomeIcon icon={faBomb} /> × {Modes[mode].bomb}\n      </div>\n\n      <Board modeInfo={Modes[mode]} />\n    </Frame>\n  );\n};\n\nTop.defaultProps = {\n  defaultMode: \"easy\"\n};\n\nexport default Top;\n","import React from \"react\";\nimport \"../styles/App.scss\";\nimport I18n from \"./atoms/I18n\";\nimport Top from \"./pages/Top\";\n\nconst App = () => {\n  return (\n    <I18n>\n      <Top />\n    </I18n>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}