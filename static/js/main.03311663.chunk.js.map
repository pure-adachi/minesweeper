{"version":3,"sources":["components/atoms/I18n/Locales/index.ts","components/atoms/I18n/index.tsx","constraints/Modes/index.ts","components/templates/Frame/index.tsx","components/templates/Board/index.tsx","components/templates/Board/Module/index.tsx","components/pages/Top/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["messages","ja","flatten","I18n","locale","props","defaultProps","Modes","easy","bomb","x","y","normal","hard","Frame","children","className","initialCell","state","value","Board","modeInfo","useState","boardSurfaces","setBoardSurfaces","started","setStarted","startPosition","setStartPosition","currentPosition","setCurrentPosition","gameStatus","setGameStatus","initialBoard","useCallback","cells","Array","fill","array","i","length","push","slice","useEffect","setBoardItems","j","n","k","Math","floor","random","shuffle","newArray","newRow","targetCellsIndex","bombCells","filter","setBombCount","cell","openAroundSafeCells","newBoardSurfaces","map","openedBombCells","changedBombCellsToFlag","updateCell","board","row","openCell","id","onClick","key","classNames","onContextMenu","e","preventDefault","nextState","changeCell","icon","faFlag","faQuestion","faBomb","cellLabel","Top","defaultMode","mode","setMode","formatMessage","useIntl","onChange","target","defaultValue","Object","keys","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ijBAGaA,EAIT,CACFC,GAAIC,IAAQD,ICCRE,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAWC,EAAd,iCACX,kBAAC,IAAD,eAAcD,OAAQA,EAAQJ,SAAUA,EAASI,IAAaC,KAGhEF,EAAKG,aAAe,CAClBF,OAAQ,MAGKD,Q,sCCWAI,EAlBU,CACvBC,KAAM,CACJC,KAAM,GACNC,EAAG,GACHC,EAAG,GAELC,OAAQ,CACNH,KAAM,GACNC,EAAG,GACHC,EAAG,IAELE,KAAM,CACJJ,KAAM,GACNC,EAAG,GACHC,EAAG,KCdQG,EAJD,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SACf,OAAO,yBAAKC,UAAU,WAAWD,I,+BCwBtBE,EAAwB,CACnCC,MAAO,QACPT,MAAM,EACNU,MAAO,GAyKMC,EAtKD,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAuB,EACIC,qBADJ,mBAC/BC,EAD+B,KAChBC,EADgB,OAERF,oBAAS,GAFD,mBAE/BG,EAF+B,KAEtBC,EAFsB,OAGIJ,qBAHJ,mBAG/BK,EAH+B,KAGhBC,EAHgB,OAIQN,qBAJR,mBAI/BO,EAJ+B,KAIdC,EAJc,OAKFR,qBALE,mBAK/BS,EAL+B,KAKnBC,EALmB,KAOhCC,EAAeC,uBAAY,WAM/B,IANsC,IAC9BxB,EAAuBW,EAAvBX,EAAGC,EAAoBU,EAApBV,EAEPwB,EAAoBC,MAAM1B,EAAIC,GAAG0B,KAAKpB,GACtCqB,EAAsB,GAEjBC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,GAAK7B,EACrC4B,EAAMG,KAAKN,EAAMO,MAAMH,EAAGA,EAAI7B,IAGhCc,EAAiBc,GACjBZ,GAAW,GACXE,EAAiB,MACjBE,EAAmB,MACnBE,EAAc,QACb,CAACX,IAEJsB,qBAAU,WACRV,MACC,CAACA,IAEJ,IAAMW,EAAgBV,uBAAY,WAWhC,IAXuC,IAC/BxB,EAA6BW,EAA7BX,EAAGC,EAA0BU,EAA1BV,EAAGF,EAAuBY,EAAvBZ,KAOV6B,EC/De,SACrBH,EADqB,GAOrB,IAJI,IADFI,EACC,EADDA,EAAGM,EACF,EADEA,EACF,IADKxB,SAAYX,EACjB,EADiBA,EAAGC,EACpB,EADoBA,EAEnB2B,EAAoB,GAGjBH,EAAMK,OAAS,GAAG,CACvB,IAAMM,EAAIX,EAAMK,OACVO,EAAIC,KAAKC,MAAMD,KAAKE,SAAWJ,GAGjCP,EAAI7B,EAAImC,EAAI,IAAMP,EAAME,OAAS,GACnCF,EAAMG,KAAKxB,GAGbqB,EAAMG,KAAKN,EAAMY,IACjBZ,EAAMY,GAAKZ,EAAMW,EAAI,GACrBX,EAAQA,EAAMO,MAAM,EAAGI,EAAI,GAQ7B,OAJIpC,EAAIC,EAAI2B,EAAME,QAChBF,EAAMG,KAAKxB,GAGNqB,EDqCmBa,CALH,sBAChBf,MAAM3B,GAAM4B,KAAZ,eAAsBpB,EAAtB,CAAmCR,MAAM,MADzB,YAEhB2B,MAAM1B,EAAIC,EAAIF,EAAO,GAAG4B,KAAKpB,KAGH,eAAaU,EAAb,CAA4BN,cACvD+B,EAAyB,GAEpBb,EAAI,EAAGA,EAAID,EAAME,OAAQD,GAAK7B,EACrC0C,EAASX,KAAKH,EAAMI,MAAMH,EAAGA,EAAI7B,IAEnCc,ECxCwB,SAACc,GAG3B,IAFA,IAAIc,EAAyB,GAEpBb,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAGrC,IAFA,IAAIc,EAAqB,GAEhBR,EAAI,EAAGA,EAAIP,EAAMC,GAAGC,OAAQK,IACnC,GAAIP,EAAMC,GAAGM,GAAGpC,KACd4C,EAAOZ,KAAKH,EAAMC,GAAGM,QAChB,CACL,IAAIS,EAA+B,GAM/BT,EAAI,GAAK,GAAKN,EAAI,GAAK,GACzBe,EAAiBb,KAAKH,EAAMC,EAAI,GAAGM,EAAI,IAGrCN,EAAI,GAAK,GACXe,EAAiBb,KAAKH,EAAMC,EAAI,GAAGM,IAGjCA,EAAI,EAAIP,EAAMC,GAAGC,QAAUD,EAAI,GAAK,GACtCe,EAAiBb,KAAKH,EAAMC,EAAI,GAAGM,EAAI,IAGrCA,EAAI,EAAIP,EAAMC,GAAGC,QACnBc,EAAiBb,KAAKH,EAAMC,GAAGM,EAAI,IAGjCA,EAAI,EAAIP,EAAMC,GAAGC,QAAUD,EAAI,EAAID,EAAME,QAC3Cc,EAAiBb,KAAKH,EAAMC,EAAI,GAAGM,EAAI,IAGrCN,EAAI,EAAID,EAAME,QAChBc,EAAiBb,KAAKH,EAAMC,EAAI,GAAGM,IAGjCA,EAAI,GAAK,GAAKN,EAAI,EAAID,EAAME,QAC9Bc,EAAiBb,KAAKH,EAAMC,EAAI,GAAGM,EAAI,IAGrCA,EAAI,GAAK,GACXS,EAAiBb,KAAKH,EAAMC,GAAGM,EAAI,IAErC,IAAMU,EAAwBD,EAAiBE,QAC7C,qBAAG/C,QAGL4C,EAAOZ,KAAP,eACKH,EAAMC,GAAGM,GADd,CAEE1B,MAAOoC,EAAUf,UAKvBY,EAASX,KAAKY,GAGhB,OAAOD,EDrBYK,CAAaL,MAE7B,CAACzB,IAEJgB,qBAAU,WACJhB,IACFiB,IACAlB,GAAW,MAEZ,CAACC,EAAeiB,IAEnBD,qBAAU,WACR,GAAId,EAAiB,CAAC,IACZU,EAASV,EAATU,EAAGM,EAAMhB,EAANgB,EADQ,EAEYtB,EAAcgB,GAAGM,GAAxCpC,EAFW,EAEXA,KAAMS,EAFK,EAELA,MAAOC,EAFF,EAEEA,MACrB,GAAIV,EACFuB,EAAc,aAQmB,IANPT,EAAciC,QAAO,SAACrB,GAI9C,OAHsBA,EAAMqB,QAC1B,SAAAE,GAAI,OAAKA,EAAKjD,MAAuB,UAAfiD,EAAKxC,SAERsB,OAAS,KAEVA,OACpBR,EAAc,OACK,IAAVb,GAAyB,SAAVD,GACxBM,EC2DyB,SAAtBmC,EACXpC,EACAM,GACI,IACIU,EAASV,EAATU,EAAGM,EAAMhB,EAANgB,EADR,EAEsBtB,EAAcgB,GAAGM,GAAlC3B,EAFL,EAEKA,MAAOC,EAFZ,EAEYA,MACXyC,EAA8B,YAAOrC,GAQzC,MALc,UAAVL,IACF0C,EAAiBrB,GAAGM,GAAG3B,MAAQ,QAInB,IAAVC,EACKyC,GAQPf,EAAI,GAAK,GACTN,EAAI,GAAK,GACgC,UAAzCqB,EAAiBrB,EAAI,GAAGM,EAAI,GAAG3B,QAE/B0C,EAAmBD,EAAoBC,EAAkB,CACvDrB,EAAGA,EAAI,EACPM,EAAGA,EAAI,KAIPN,EAAI,GAAK,GAA0C,UAArCqB,EAAiBrB,EAAI,GAAGM,GAAG3B,QAC3C0C,EAAmBD,EAAoBC,EAAkB,CACvDrB,EAAGA,EAAI,EACPM,OAKFA,EAAI,EAAIe,EAAiBrB,GAAGC,QAC5BD,EAAI,GAAK,GACgC,UAAzCqB,EAAiBrB,EAAI,GAAGM,EAAI,GAAG3B,QAE/B0C,EAAmBD,EAAoBC,EAAkB,CACvDrB,EAAGA,EAAI,EACPM,EAAGA,EAAI,KAKTA,EAAI,EAAIe,EAAiBrB,GAAGC,QACS,UAArCoB,EAAiBrB,GAAGM,EAAI,GAAG3B,QAE3B0C,EAAmBD,EAAoBC,EAAkB,CACvDrB,IACAM,EAAGA,EAAI,KAKTA,EAAI,EAAIe,EAAiBrB,GAAGC,QAC5BD,EAAI,EAAIqB,EAAiBpB,QACgB,UAAzCoB,EAAiBrB,EAAI,GAAGM,EAAI,GAAG3B,QAE/B0C,EAAmBD,EAAoBC,EAAkB,CACvDrB,EAAGA,EAAI,EACPM,EAAGA,EAAI,KAKTN,EAAI,EAAIqB,EAAiBpB,QACY,UAArCoB,EAAiBrB,EAAI,GAAGM,GAAG3B,QAE3B0C,EAAmBD,EAAoBC,EAAkB,CACvDrB,EAAGA,EAAI,EACPM,OAKFA,EAAI,GAAK,GACTN,EAAI,EAAIqB,EAAiBpB,QACgB,UAAzCoB,EAAiBrB,EAAI,GAAGM,EAAI,GAAG3B,QAE/B0C,EAAmBD,EAAoBC,EAAkB,CACvDrB,EAAGA,EAAI,EACPM,EAAGA,EAAI,KAIPA,EAAI,GAAK,GAA0C,UAArCe,EAAiBrB,GAAGM,EAAI,GAAG3B,QAC3C0C,EAAmBD,EAAoBC,EAAkB,CACvDrB,IACAM,EAAGA,EAAI,KAIJe,GD/JkBD,CAAoBpC,EAAeM,OAKzD,CAACA,IAEJc,qBAAU,WACR,OAAQZ,GACN,IAAK,OACHP,ECqBuB,SAACD,GAAD,OAC7BA,EAAcsC,KAAI,SAAA1B,GAAK,OACrBA,EAAM0B,KAAI,SAAAH,GACR,OAAIA,EAAKjD,KACA,eACFiD,EADL,CAEExC,MAAO,SAGFwC,QD9BUI,CAAgBvC,IACjC,MACF,IAAK,MACHC,ECgC8B,SAACD,GAAD,OACpCA,EAAcsC,KAAI,SAAA1B,GAAK,OACrBA,EAAM0B,KAAI,SAAAH,GACR,OAAIA,EAAKjD,KACA,eACFiD,EADL,CAEExC,MAAO,SAGFwC,QDzCUK,CAAuBxC,OAG3C,CAACQ,IAEJ,IAAMiC,EAAa9B,uBACjB,SAACK,EAAWM,EAAW3B,GACrB,IAAI+C,EAAK,YAAO1C,GACZ2C,EAAG,YAAOD,EAAM1B,IACpB2B,EAAIrB,GAAJ,eAAcoB,EAAM1B,GAAGM,GAAvB,CAA2B3B,UAC3B+C,EAAM1B,GAAK2B,EAEX1C,EAAiByC,KAEnB,CAAC1C,IAGG4C,EAAWjC,uBACf,SAACK,EAAWM,GACLd,IACCJ,EACgC,UAA9BJ,EAAcgB,GAAGM,GAAG3B,QACtB8C,EAAWzB,EAAGM,EAAG,QACjBf,EAAmB,CAAES,IAAGM,QAG1BjB,EAAiB,CAAEW,IAAGM,MACtBf,EAAmB,CAAES,IAAGM,UAI9B,CAACtB,EAAeI,EAAeqC,EAAYjC,IAS7C,GANAY,qBAAU,WACJlB,GAAWE,GACbwC,EAASxC,EAAcY,EAAGZ,EAAckB,KAEzC,CAACpB,EAAS0C,EAAUxC,KAElBJ,EACH,OAAO,qCAWT,OACE,oCACE,6BACGQ,GACC,kBAAC,IAAD,CAAkBqC,GAAE,0BAAqBrC,MAG7C,yBAAKf,UAAU,WACb,4BAAQqD,QAAS,kBAAMpC,MACrB,kBAAC,IAAD,CAAkBmC,GAAG,4BAGzB,yBAAKpD,UAAU,SACZO,EAAcsC,KAAI,SAACK,EAAiB3B,GAAlB,OACjB,yBAAK+B,IAAK/B,EAAGvB,UAAU,OACpBkD,EAAIL,KAAI,SAACH,EAAMb,GAAP,OACP,yBACEyB,IAAKzB,EACL7B,UAAWuD,IAAW,OAAQb,EAAKxC,MAAO,CAAET,KAAMiD,EAAKjD,OACvD4D,QAAS,kBAAMF,EAAS5B,EAAGM,IAC3B2B,cAAe,SAAAC,GAAC,OA5BX,SAACA,EAAqBlC,EAAWM,GAClD4B,EAAEC,iBAEE/C,IAAkBI,GACpBiC,EAAWzB,EAAGM,EC3CK,SAAC3B,GACxB,OAAQA,GACN,IAAK,QACH,MAAO,OACT,IAAK,OACH,MAAO,SACT,IAAK,SACH,MAAO,QACT,IAAK,OACH,OAAOA,GDkCUyD,CAAUpD,EAAcgB,GAAGM,GAAG3B,QAwBjB0D,CAAWH,EAAGlC,EAAGM,KCxF5B,SAACa,GACxB,OAAQA,EAAKxC,OACX,IAAK,QACH,OACF,IAAK,OACH,OAAO,kBAAC,IAAD,CAAiB2D,KAAMC,MAChC,IAAK,SACH,OAAO,kBAAC,IAAD,CAAiBD,KAAME,MAChC,IAAK,OACH,OAAIrB,EAAKjD,KACA,kBAAC,IAAD,CAAiBoE,KAAMG,MAEX,IAAftB,EAAKvC,WACP,EAEOuC,EAAKvC,OD2EL8D,CAAUvB,cEnLrBwB,EAAM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAA0B,EACf7D,mBAAS6D,GADM,mBAChCC,EADgC,KAC1BC,EAD0B,KAE/BC,EAAkBC,cAAlBD,cAQR,OACE,kBAAC,EAAD,KACE,yBAAKtE,UAAU,SACb,kBAAC,IAAD,CAAkBoD,GAAG,qBAGvB,yBAAKpD,UAAU,QACb,4BAAQwE,SAbK,SAAC,GAEyB,IADjCrE,EACgC,EAD1CsE,OAAUtE,MAEVkE,EAAQlE,IAU0BuE,aAAcN,GACzCO,OAAOC,KAAKrF,GAAOsD,KAAI,SAACS,EAAK/B,GAAN,OACtB,4BAAQ+B,IAAK/B,EAAGpB,MAAOmD,GACpBgB,EAAc,CAAElB,GAAG,kBAAD,OAAoBE,UAI7C,kBAAC,IAAD,CAAiBO,KAAMG,MARzB,SAQuCzE,EAAM6E,GAAM3E,MAGnD,kBAAC,EAAD,CAAOY,SAAUd,EAAM6E,OAK7BF,EAAI5E,aAAe,CACjB6E,YAAa,QAGAD,QCrCAW,EARH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03311663.chunk.js","sourcesContent":["import flatten from \"flat\";\nimport ja from \"./ja.json\";\n\nexport const messages: {\n  ja: {\n    [key: string]: string;\n  };\n} = {\n  ja: flatten(ja)\n};\n","import React, { ReactNode } from \"react\";\nimport { IntlProvider } from \"react-intl\";\nimport { messages } from \"./Locales\";\n\ninterface IProps {\n  children: ReactNode;\n  locale: \"ja\";\n}\n\nconst I18n = ({ locale, ...props }: IProps) => (\n  <IntlProvider locale={locale} messages={messages[locale]} {...props} />\n);\n\nI18n.defaultProps = {\n  locale: \"ja\"\n};\n\nexport default I18n;\n","export type ModeInfoType = {\n  bomb: number;\n  x: number;\n  y: number;\n};\n\ntype ModesType = {\n  [key: string]: ModeInfoType;\n};\n\nconst Modes: ModesType = {\n  easy: {\n    bomb: 10,\n    x: 10,\n    y: 7\n  },\n  normal: {\n    bomb: 40,\n    x: 18,\n    y: 14\n  },\n  hard: {\n    bomb: 99,\n    x: 24,\n    y: 20\n  }\n};\n\nexport default Modes;\n","import React, { ReactNode } from \"react\";\n\ninterface IProps {\n  children: ReactNode;\n}\n\nconst Frame = ({ children }: IProps) => {\n  return <div className=\"wrapper\">{children}</div>;\n};\n\nexport default Frame;\n","import classNames from \"classnames\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ModeInfoType } from \"../../../constraints/Modes\";\nimport {\n  cellLabel,\n  nextState,\n  setBombCount,\n  shuffle,\n  openedBombCells,\n  changedBombCellsToFlag,\n  openAroundSafeCells\n} from \"./Module\";\n\ninterface IProps {\n  modeInfo: ModeInfoType;\n}\n\nexport type CellStates = \"close\" | \"flag\" | \"onHold\" | \"open\";\n\nexport type CellType = {\n  state: CellStates;\n  bomb: boolean;\n  value: number;\n};\n\nexport type PositionType = {\n  i: number;\n  j: number;\n};\n\nexport const initialCell: CellType = {\n  state: \"close\",\n  bomb: false,\n  value: 0\n};\n\nconst Board = ({ modeInfo }: IProps) => {\n  const [boardSurfaces, setBoardSurfaces] = useState();\n  const [started, setStarted] = useState(false);\n  const [startPosition, setStartPosition] = useState();\n  const [currentPosition, setCurrentPosition] = useState();\n  const [gameStatus, setGameStatus] = useState();\n\n  const initialBoard = useCallback(() => {\n    const { x, y }: ModeInfoType = modeInfo;\n\n    let cells: CellType[] = Array(x * y).fill(initialCell);\n    let array: CellType[][] = [];\n\n    for (let i = 0; i < cells.length; i += x) {\n      array.push(cells.slice(i, i + x));\n    }\n\n    setBoardSurfaces(array);\n    setStarted(false);\n    setStartPosition(null);\n    setCurrentPosition(null);\n    setGameStatus(null);\n  }, [modeInfo]);\n\n  useEffect(() => {\n    initialBoard();\n  }, [initialBoard]);\n\n  const setBoardItems = useCallback(() => {\n    const { x, y, bomb }: ModeInfoType = modeInfo;\n\n    let cells: CellType[] = [\n      ...Array(bomb).fill({ ...initialCell, bomb: true }),\n      ...Array(x * y - bomb - 1).fill(initialCell) // 初回選択マスは爆弾無しとする為に-1\n    ];\n\n    let array: CellType[] = shuffle(cells, { ...startPosition, modeInfo });\n    let newArray: CellType[][] = [];\n\n    for (let i = 0; i < array.length; i += x) {\n      newArray.push(array.slice(i, i + x));\n    }\n    setBoardSurfaces(setBombCount(newArray));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [startPosition]);\n\n  useEffect(() => {\n    if (startPosition) {\n      setBoardItems();\n      setStarted(true);\n    }\n  }, [startPosition, setBoardItems]);\n\n  useEffect(() => {\n    if (currentPosition) {\n      const { i, j } = currentPosition;\n      const { bomb, state, value } = boardSurfaces[i][j];\n      if (bomb) {\n        setGameStatus(\"lose\");\n      } else {\n        const closeSafeCellRows = boardSurfaces.filter((cells: CellType[]) => {\n          const safeCellsRows = cells.filter(\n            cell => !cell.bomb && cell.state === \"close\"\n          );\n          return safeCellsRows.length > 0;\n        });\n        if (closeSafeCellRows.length === 0) {\n          setGameStatus(\"win\");\n        } else if (value === 0 && state === \"open\") {\n          setBoardSurfaces(openAroundSafeCells(boardSurfaces, currentPosition));\n        }\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPosition]);\n\n  useEffect(() => {\n    switch (gameStatus) {\n      case \"lose\":\n        setBoardSurfaces(openedBombCells(boardSurfaces));\n        break;\n      case \"win\":\n        setBoardSurfaces(changedBombCellsToFlag(boardSurfaces));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [gameStatus]);\n\n  const updateCell = useCallback(\n    (i: number, j: number, state: CellStates) => {\n      let board = [...boardSurfaces];\n      let row = [...board[i]];\n      row[j] = { ...board[i][j], state };\n      board[i] = row;\n\n      setBoardSurfaces(board);\n    },\n    [boardSurfaces]\n  );\n\n  const openCell = useCallback(\n    (i: number, j: number) => {\n      if (!gameStatus) {\n        if (startPosition) {\n          if (boardSurfaces[i][j].state === \"close\") {\n            updateCell(i, j, \"open\");\n            setCurrentPosition({ i, j });\n          }\n        } else {\n          setStartPosition({ i, j });\n          setCurrentPosition({ i, j });\n        }\n      }\n    },\n    [boardSurfaces, startPosition, updateCell, gameStatus]\n  );\n\n  useEffect(() => {\n    if (started && startPosition) {\n      openCell(startPosition.i, startPosition.j);\n    }\n  }, [started, openCell, startPosition]);\n\n  if (!boardSurfaces) {\n    return <></>;\n  }\n\n  const changeCell = (e: React.MouseEvent, i: number, j: number) => {\n    e.preventDefault();\n\n    if (startPosition && !gameStatus) {\n      updateCell(i, j, nextState(boardSurfaces[i][j].state));\n    }\n  };\n\n  return (\n    <>\n      <div>\n        {gameStatus && (\n          <FormattedMessage id={`templates.Board.${gameStatus}`} />\n        )}\n      </div>\n      <div className=\"buttons\">\n        <button onClick={() => initialBoard()}>\n          <FormattedMessage id=\"templates.Board.reset\" />\n        </button>\n      </div>\n      <div className=\"board\">\n        {boardSurfaces.map((row: CellType[], i: number) => (\n          <div key={i} className=\"row\">\n            {row.map((cell, j) => (\n              <div\n                key={j}\n                className={classNames(\"cell\", cell.state, { bomb: cell.bomb })}\n                onClick={() => openCell(i, j)}\n                onContextMenu={e => changeCell(e, i, j)}\n              >\n                {cellLabel(cell)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Board;\n","import { faBomb, faFlag, faQuestion } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { CellType, CellStates, initialCell, PositionType } from \"../../Board\";\nimport { ModeInfoType } from \"../../../../constraints/Modes\";\n\ninterface IShuffleProps extends PositionType {\n  modeInfo: ModeInfoType;\n}\n\nexport const shuffle = (\n  cells: CellType[],\n  { i, j, modeInfo: { x, y } }: IShuffleProps\n) => {\n  let array: CellType[] = [];\n\n  // ダステンフェルドの手法(フィッシャー–イェーツのシャッフルの改良版)でシャッフル\n  while (cells.length > 0) {\n    const n = cells.length;\n    const k = Math.floor(Math.random() * n);\n\n    // 一番最初に選択したマスには爆弾を配置しない為の対策\n    if (i * x + j + 1 === array.length + 1) {\n      array.push(initialCell);\n    }\n\n    array.push(cells[k]);\n    cells[k] = cells[n - 1];\n    cells = cells.slice(0, n - 1);\n  }\n\n  // 一番右下のマスを選択された場合の対策\n  if (x * y > array.length) {\n    array.push(initialCell);\n  }\n\n  return array;\n};\n\nexport const setBombCount = (array: CellType[][]) => {\n  let newArray: CellType[][] = [];\n\n  for (let i = 0; i < array.length; i++) {\n    let newRow: CellType[] = [];\n\n    for (let j = 0; j < array[i].length; j++) {\n      if (array[i][j].bomb) {\n        newRow.push(array[i][j]);\n      } else {\n        let targetCellsIndex: CellType[] = [];\n\n        // 上下：i\n        // 左右：j\n\n        // 左上\n        if (j - 1 >= 0 && i - 1 >= 0) {\n          targetCellsIndex.push(array[i - 1][j - 1]);\n        }\n        // 上\n        if (i - 1 >= 0) {\n          targetCellsIndex.push(array[i - 1][j]);\n        }\n        // 右上\n        if (j + 1 < array[i].length && i - 1 >= 0) {\n          targetCellsIndex.push(array[i - 1][j + 1]);\n        }\n        // 右\n        if (j + 1 < array[i].length) {\n          targetCellsIndex.push(array[i][j + 1]);\n        }\n        // 右下\n        if (j + 1 < array[i].length && i + 1 < array.length) {\n          targetCellsIndex.push(array[i + 1][j + 1]);\n        }\n        // 下\n        if (i + 1 < array.length) {\n          targetCellsIndex.push(array[i + 1][j]);\n        }\n        // 左下\n        if (j - 1 >= 0 && i + 1 < array.length) {\n          targetCellsIndex.push(array[i + 1][j - 1]);\n        }\n        // 左\n        if (j - 1 >= 0) {\n          targetCellsIndex.push(array[i][j - 1]);\n        }\n        const bombCells: CellType[] = targetCellsIndex.filter(\n          ({ bomb }) => bomb\n        );\n\n        newRow.push({\n          ...array[i][j],\n          value: bombCells.length\n        });\n      }\n    }\n\n    newArray.push(newRow);\n  }\n\n  return newArray;\n};\n\nexport const cellLabel = (cell: CellType) => {\n  switch (cell.state) {\n    case \"close\":\n      return;\n    case \"flag\":\n      return <FontAwesomeIcon icon={faFlag} />;\n    case \"onHold\":\n      return <FontAwesomeIcon icon={faQuestion} />;\n    case \"open\":\n      if (cell.bomb) {\n        return <FontAwesomeIcon icon={faBomb} />;\n      } else {\n        if (cell.value === 0) {\n          return;\n        } else {\n          return cell.value;\n        }\n      }\n  }\n};\n\nexport const nextState = (state: CellStates) => {\n  switch (state) {\n    case \"close\":\n      return \"flag\";\n    case \"flag\":\n      return \"onHold\";\n    case \"onHold\":\n      return \"close\";\n    case \"open\":\n      return state;\n  }\n};\n\nexport const openedBombCells = (boardSurfaces: CellType[][]) =>\n  boardSurfaces.map(cells =>\n    cells.map(cell => {\n      if (cell.bomb) {\n        return {\n          ...cell,\n          state: \"open\"\n        };\n      } else {\n        return cell;\n      }\n    })\n  );\n\nexport const changedBombCellsToFlag = (boardSurfaces: CellType[][]) =>\n  boardSurfaces.map(cells =>\n    cells.map(cell => {\n      if (cell.bomb) {\n        return {\n          ...cell,\n          state: \"flag\"\n        };\n      } else {\n        return cell;\n      }\n    })\n  );\n\nexport const openAroundSafeCells = (\n  boardSurfaces: CellType[][],\n  currentPosition: PositionType\n) => {\n  const { i, j } = currentPosition;\n  const { state, value } = boardSurfaces[i][j];\n  let newBoardSurfaces: CellType[][] = [...boardSurfaces];\n\n  // 最初は既に空いてる\n  if (state === \"close\") {\n    newBoardSurfaces[i][j].state = \"open\";\n  }\n\n  // 爆弾のある手前まで来たら再帰処理終了\n  if (value !== 0) {\n    return newBoardSurfaces;\n  }\n\n  // 上下：i\n  // 左右：j\n\n  // 左上\n  if (\n    j - 1 >= 0 &&\n    i - 1 >= 0 &&\n    newBoardSurfaces[i - 1][j - 1].state === \"close\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i - 1,\n      j: j - 1\n    });\n  }\n  // 上\n  if (i - 1 >= 0 && newBoardSurfaces[i - 1][j].state === \"close\") {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i - 1,\n      j\n    });\n  }\n  // 右上\n  if (\n    j + 1 < newBoardSurfaces[i].length &&\n    i - 1 >= 0 &&\n    newBoardSurfaces[i - 1][j + 1].state === \"close\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i - 1,\n      j: j + 1\n    });\n  }\n  // 右\n  if (\n    j + 1 < newBoardSurfaces[i].length &&\n    newBoardSurfaces[i][j + 1].state === \"close\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i,\n      j: j + 1\n    });\n  }\n  // 右下\n  if (\n    j + 1 < newBoardSurfaces[i].length &&\n    i + 1 < newBoardSurfaces.length &&\n    newBoardSurfaces[i + 1][j + 1].state === \"close\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i + 1,\n      j: j + 1\n    });\n  }\n  // 下\n  if (\n    i + 1 < newBoardSurfaces.length &&\n    newBoardSurfaces[i + 1][j].state === \"close\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i + 1,\n      j\n    });\n  }\n  // 左下\n  if (\n    j - 1 >= 0 &&\n    i + 1 < newBoardSurfaces.length &&\n    newBoardSurfaces[i + 1][j - 1].state === \"close\"\n  ) {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i: i + 1,\n      j: j - 1\n    });\n  }\n  // 左\n  if (j - 1 >= 0 && newBoardSurfaces[i][j - 1].state === \"close\") {\n    newBoardSurfaces = openAroundSafeCells(newBoardSurfaces, {\n      i,\n      j: j - 1\n    });\n  }\n\n  return newBoardSurfaces;\n};\n","import { faBomb } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport Modes from \"../../../constraints/Modes\";\nimport Frame from \"../../templates/Frame\";\nimport Board from \"../../templates/Board\";\n\ninterface IProps {\n  defaultMode: ModeType;\n}\n\ntype ModeType = \"easy\" | \"normal\" | \"hard\";\n\nconst Top = ({ defaultMode }: IProps) => {\n  const [mode, setMode] = useState(defaultMode);\n  const { formatMessage } = useIntl();\n\n  const changeMode = ({\n    target: { value }\n  }: React.ChangeEvent<HTMLSelectElement>) => {\n    setMode(value as ModeType);\n  };\n\n  return (\n    <Frame>\n      <div className=\"title\">\n        <FormattedMessage id=\"pages.Top.title\" />\n      </div>\n\n      <div className=\"menu\">\n        <select onChange={changeMode} defaultValue={mode}>\n          {Object.keys(Modes).map((key, i) => (\n            <option key={i} value={key}>\n              {formatMessage({ id: `pages.Top.mode.${key}` })}\n            </option>\n          ))}\n        </select>\n        <FontAwesomeIcon icon={faBomb} /> × {Modes[mode].bomb}\n      </div>\n\n      <Board modeInfo={Modes[mode]} />\n    </Frame>\n  );\n};\n\nTop.defaultProps = {\n  defaultMode: \"easy\"\n};\n\nexport default Top;\n","import React from \"react\";\nimport \"../styles/App.scss\";\nimport I18n from \"./atoms/I18n\";\nimport Top from \"./pages/Top\";\n\nconst App = () => {\n  return (\n    <I18n>\n      <Top />\n    </I18n>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}