{"version":3,"sources":["components/atoms/I18n/Locales/index.ts","components/atoms/I18n/index.tsx","constraints/Modes/index.ts","components/templates/Frame/index.tsx","components/templates/Board/index.tsx","components/templates/Board/Module/index.tsx","components/pages/Top/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["messages","ja","flatten","I18n","locale","props","defaultProps","Modes","easy","bomb","x","y","normal","hard","Frame","children","className","initialCell","state","value","Board","modeInfo","useState","boardSurfaces","setBoardSurfaces","startPosition","setStartPosition","started","setStarted","initialBoard","useCallback","cells","Array","fill","array","i","length","push","slice","useEffect","setBoardItems","j","n","k","Math","floor","random","shuffle","newArray","newRow","targetCellsIndex","bombCells","filter","setBombCount","updateCell","board","row","openCell","onClick","id","map","key","cell","classNames","onContextMenu","e","preventDefault","nextState","changeCell","icon","faFlag","faQuestion","faBomb","cellLabel","Top","defaultMode","mode","setMode","formatMessage","useIntl","onChange","target","defaultValue","Object","keys","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96620dec.chunk.js","sourcesContent":["import flatten from \"flat\";\nimport ja from \"./ja.json\";\n\nexport const messages: {\n  ja: {\n    [key: string]: string;\n  };\n} = {\n  ja: flatten(ja)\n};\n","import React, { ReactNode } from \"react\";\nimport { IntlProvider } from \"react-intl\";\nimport { messages } from \"./Locales\";\n\ninterface IProps {\n  children: ReactNode;\n  locale: \"ja\";\n}\n\nconst I18n = ({ locale, ...props }: IProps) => (\n  <IntlProvider locale={locale} messages={messages[locale]} {...props} />\n);\n\nI18n.defaultProps = {\n  locale: \"ja\"\n};\n\nexport default I18n;\n","export type ModeInfoType = {\n  bomb: number;\n  x: number;\n  y: number;\n};\n\ntype ModesType = {\n  [key: string]: ModeInfoType;\n};\n\nconst Modes: ModesType = {\n  easy: {\n    bomb: 10,\n    x: 10,\n    y: 7\n  },\n  normal: {\n    bomb: 40,\n    x: 18,\n    y: 14\n  },\n  hard: {\n    bomb: 99,\n    x: 24,\n    y: 20\n  }\n};\n\nexport default Modes;\n","import React, { ReactNode } from \"react\";\n\ninterface IProps {\n  children: ReactNode;\n}\n\nconst Frame = ({ children }: IProps) => {\n  return <div className=\"wrapper\">{children}</div>;\n};\n\nexport default Frame;\n","import classNames from \"classnames\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ModeInfoType } from \"../../../constraints/Modes\";\nimport { cellLabel, nextState, setBombCount, shuffle } from \"./Module\";\n\ninterface IProps {\n  modeInfo: ModeInfoType;\n}\n\nexport type CellStates = \"close\" | \"flag\" | \"onHold\" | \"open\";\n\nexport type CellType = {\n  state: CellStates;\n  bomb: boolean;\n  value: number;\n};\n\nexport type StartPositionType = {\n  i: number;\n  j: number;\n};\n\nexport const initialCell: CellType = {\n  state: \"close\",\n  bomb: false,\n  value: 0\n};\n\nconst Board = ({ modeInfo }: IProps) => {\n  const [boardSurfaces, setBoardSurfaces] = useState();\n  const [startPosition, setStartPosition] = useState();\n  const [started, setStarted] = useState(false);\n\n  // console.log(startPosition, started);\n\n  const initialBoard = useCallback(() => {\n    const { x, y }: ModeInfoType = modeInfo;\n\n    let cells: CellType[] = Array(x * y).fill(initialCell);\n    let array: CellType[][] = [];\n\n    for (let i = 0; i < cells.length; i += x) {\n      array.push(cells.slice(i, i + x));\n    }\n\n    setBoardSurfaces(array);\n    setStarted(false);\n    setStartPosition(null);\n  }, [modeInfo]);\n\n  useEffect(() => {\n    initialBoard();\n  }, [initialBoard]);\n\n  const setBoardItems = useCallback(() => {\n    const { x, y, bomb }: ModeInfoType = modeInfo;\n\n    let cells: CellType[] = [\n      ...Array(bomb).fill({ ...initialCell, bomb: true }),\n      ...Array(x * y - bomb - 1).fill(initialCell) // 初回選択マスは爆弾無しとする為に-1\n    ];\n\n    let array: CellType[] = shuffle(cells, { ...startPosition });\n    let newArray: CellType[][] = [];\n\n    for (let i = 0; i < array.length; i += x) {\n      newArray.push(array.slice(i, i + x));\n    }\n\n    setBoardSurfaces(setBombCount(newArray));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [startPosition]);\n\n  useEffect(() => {\n    if (startPosition) {\n      setBoardItems();\n      setStarted(true);\n    }\n  }, [startPosition, setBoardItems]);\n\n  const updateCell = useCallback(\n    (i: number, j: number, state: CellStates) => {\n      let board = [...boardSurfaces];\n      let row = [...board[i]];\n      row[j] = { ...board[i][j], state };\n      board[i] = row;\n\n      setBoardSurfaces(board);\n    },\n    [boardSurfaces]\n  );\n\n  const openCell = useCallback(\n    (i: number, j: number) => {\n      if (startPosition) {\n        if (boardSurfaces[i][j].state === \"close\") {\n          updateCell(i, j, \"open\");\n        }\n      } else {\n        setStartPosition({ i, j });\n      }\n    },\n    [boardSurfaces, startPosition, updateCell]\n  );\n\n  useEffect(() => {\n    if (started && startPosition) {\n      openCell(startPosition.i, startPosition.j);\n    }\n  }, [started, openCell, startPosition]);\n\n  if (!boardSurfaces) {\n    return <></>;\n  }\n\n  const changeCell = (e: React.MouseEvent, i: number, j: number) => {\n    e.preventDefault();\n\n    updateCell(i, j, nextState(boardSurfaces[i][j].state));\n  };\n\n  return (\n    <>\n      <div className=\"buttons\">\n        <button onClick={() => initialBoard()}>\n          <FormattedMessage id=\"templates.Board.reset\" />\n        </button>\n      </div>\n      <div className=\"board\">\n        {boardSurfaces.map((row: CellType[], i: number) => (\n          <div key={i} className=\"row\">\n            {row.map((cell, j) => (\n              <div\n                key={j}\n                className={classNames(\"cell\", cell.state, { bomb: cell.bomb })}\n                onClick={() => openCell(i, j)}\n                onContextMenu={e => changeCell(e, i, j)}\n              >\n                {cellLabel(cell)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Board;\n","import { faBomb, faFlag, faQuestion } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport {\n  CellType,\n  CellStates,\n  initialCell,\n  StartPositionType\n} from \"../../Board\";\n\nexport const shuffle = (cells: CellType[], { i, j }: StartPositionType) => {\n  let array: CellType[] = [];\n\n  // ダステンフェルドの手法(フィッシャー–イェーツのシャッフルの改良版)でシャッフル\n  while (cells.length > 0) {\n    const n = cells.length;\n    const k = Math.floor(Math.random() * n);\n\n    if ((i + 1) * (j + 1) === array.length + 1) {\n      array.push(initialCell);\n    }\n\n    array.push(cells[k]);\n    cells[k] = cells[n - 1];\n    cells = cells.slice(0, n - 1);\n  }\n\n  return array;\n};\n\nexport const setBombCount = (array: CellType[][]) => {\n  let newArray: CellType[][] = [];\n\n  for (let i = 0; i < array.length; i++) {\n    let newRow: CellType[] = [];\n\n    for (let j = 0; j < array[i].length; j++) {\n      if (array[i][j].bomb) {\n        newRow.push(array[i][j]);\n      } else {\n        let targetCellsIndex: CellType[] = [];\n\n        // 上下：i\n        // 左右：j\n\n        // 左上\n        if (j - 1 >= 0 && i - 1 >= 0) {\n          targetCellsIndex.push(array[i - 1][j - 1]);\n        }\n        // 上\n        if (i - 1 >= 0) {\n          targetCellsIndex.push(array[i - 1][j]);\n        }\n        // 右上\n        if (j + 1 < array[i].length && i - 1 >= 0) {\n          targetCellsIndex.push(array[i - 1][j + 1]);\n        }\n        // 右\n        if (j + 1 < array[i].length) {\n          targetCellsIndex.push(array[i][j + 1]);\n        }\n        // 右下\n        if (j + 1 < array[i].length && i + 1 < array.length) {\n          targetCellsIndex.push(array[i + 1][j + 1]);\n        }\n        // 下\n        if (i + 1 < array.length) {\n          targetCellsIndex.push(array[i + 1][j]);\n        }\n        // 左下\n        if (j - 1 >= 0 && i + 1 < array.length) {\n          targetCellsIndex.push(array[i + 1][j - 1]);\n        }\n        // 左\n        if (j - 1 >= 0) {\n          targetCellsIndex.push(array[i][j - 1]);\n        }\n        const bombCells: CellType[] = targetCellsIndex.filter(\n          ({ bomb }) => bomb\n        );\n\n        newRow.push({\n          ...array[i][j],\n          value: bombCells.length\n        });\n      }\n    }\n\n    newArray.push(newRow);\n  }\n\n  return newArray;\n};\n\nexport const cellLabel = (cell: CellType) => {\n  switch (cell.state) {\n    case \"close\":\n      return;\n    case \"flag\":\n      return <FontAwesomeIcon icon={faFlag} />;\n    case \"onHold\":\n      return <FontAwesomeIcon icon={faQuestion} />;\n    case \"open\":\n      if (cell.bomb) {\n        return <FontAwesomeIcon icon={faBomb} />;\n      } else {\n        if (cell.value === 0) {\n          return;\n        } else {\n          return cell.value;\n        }\n      }\n  }\n};\n\nexport const nextState = (state: CellStates) => {\n  switch (state) {\n    case \"close\":\n      return \"flag\";\n    case \"flag\":\n      return \"onHold\";\n    case \"onHold\":\n      return \"close\";\n    case \"open\":\n      return state;\n  }\n};\n","import { faBomb } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport Modes from \"../../../constraints/Modes\";\nimport Frame from \"../../templates/Frame\";\nimport Board from \"../../templates/Board\";\n\ninterface IProps {\n  defaultMode: ModeType;\n}\n\ntype ModeType = \"easy\" | \"normal\" | \"hard\";\n\nconst Top = ({ defaultMode }: IProps) => {\n  const [mode, setMode] = useState(defaultMode);\n  const { formatMessage } = useIntl();\n\n  const changeMode = ({\n    target: { value }\n  }: React.ChangeEvent<HTMLSelectElement>) => {\n    setMode(value as ModeType);\n  };\n\n  return (\n    <Frame>\n      <div className=\"title\">\n        <FormattedMessage id=\"pages.Top.title\" />\n      </div>\n\n      <div className=\"menu\">\n        <select onChange={changeMode} defaultValue={mode}>\n          {Object.keys(Modes).map((key, i) => (\n            <option key={i} value={key}>\n              {formatMessage({ id: `pages.Top.mode.${key}` })}\n            </option>\n          ))}\n        </select>\n        <FontAwesomeIcon icon={faBomb} /> × {Modes[mode].bomb}\n      </div>\n\n      <Board modeInfo={Modes[mode]} />\n    </Frame>\n  );\n};\n\nTop.defaultProps = {\n  defaultMode: \"easy\"\n};\n\nexport default Top;\n","import React from \"react\";\nimport \"../styles/App.scss\";\nimport I18n from \"./atoms/I18n\";\nimport Top from \"./pages/Top\";\n\nconst App = () => {\n  return (\n    <I18n>\n      <Top />\n    </I18n>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}